type User @aws_cognito_user_pools {
  id: ID!
  username: String!
  role: Role!
  profilePicture: String
  email: String
  phone: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
  postReports(filter: ModelPostReportFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostReportConnection
  sightings(filter: ModelSightingFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSightingConnection
  sightingReports(filter: ModelSightingReportFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSightingReportConnection
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  commentReports(filter: ModelCommentReportFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentReportConnection
  owner: String
}

type Post @aws_cognito_user_pools {
  id: ID!
  name: String!
  status: PetStatus!
  gender: PetGender!
  summary: String!
  description: String!
  resolved: String
  lastKnownLocation: Location
  species: PetSpecies!
  images: [String]
  user: User
  userID: ID!
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  postReports(filter: ModelPostReportFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostReportConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Comment @aws_cognito_user_pools {
  id: ID!
  content: String!
  postID: ID!
  parentCommentID: ID
  parentComment: Comment
  replies(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  user: User
  userID: ID!
  commentReports(filter: ModelCommentReportFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentReportConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Sighting @aws_cognito_user_pools {
  id: ID!
  image: String
  location: Location
  reporterType: ReporterType!
  user: User
  userID: ID!
  email: String
  phone: String
  sightingReports(filter: ModelSightingReportFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSightingReportConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type PostReport @aws_cognito_user_pools {
  id: ID!
  reason: ReportReason!
  description: String
  user: User
  userID: ID!
  post: Post
  postID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type CommentReport @aws_cognito_user_pools {
  id: ID!
  reason: ReportReason!
  description: String
  user: User
  userID: ID!
  comment: Comment
  commentID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type SightingReport @aws_cognito_user_pools {
  id: ID!
  reason: ReportReason!
  description: String
  user: User
  userID: ID!
  sighting: Sighting
  sightingID: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Location @aws_cognito_user_pools @aws_api_key {
  latitude: Float!
  longitude: Float!
  address: String
}

enum ReportReason {
  INAPPROPRIATE
  SPAM
  OTHER
}

enum Role {
  USER
  ADMIN
}

enum ReporterType {
  USER
  GUEST
}

enum PetStatus {
  LOST
  FOUND
}

enum PetSpecies {
  DOG
  CAT
  OTHER
}

enum PetGender {
  MALE
  FEMALE
  OTHER
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_cognito_user_pools {
  items: [User]!
  nextToken: String
}

input ModelRoleInput {
  eq: Role
  ne: Role
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  role: ModelRoleInput
  profilePicture: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User @aws_cognito_user_pools
  listUsers(id: ID, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection @aws_cognito_user_pools
  getPost(id: ID!): Post @aws_cognito_user_pools
  listPosts(id: ID, filter: ModelPostFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostConnection @aws_cognito_user_pools
  postsByUser(userID: ID!, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_cognito_user_pools
  getComment(id: ID!): Comment @aws_cognito_user_pools
  listComments(id: ID, filter: ModelCommentFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCommentConnection @aws_cognito_user_pools
  commentsByPost(postID: ID!, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_cognito_user_pools
  repliesByParentComment(parentCommentID: ID!, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_cognito_user_pools
  commentsByUser(userID: ID!, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_cognito_user_pools
  getSighting(id: ID!): Sighting @aws_cognito_user_pools
  listSightings(id: ID, filter: ModelSightingFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSightingConnection @aws_cognito_user_pools
  sightingsByUser(userID: ID!, sortDirection: ModelSortDirection, filter: ModelSightingFilterInput, limit: Int, nextToken: String): ModelSightingConnection @aws_cognito_user_pools
  getPostReport(id: ID!): PostReport @aws_cognito_user_pools
  listPostReports(id: ID, filter: ModelPostReportFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostReportConnection @aws_cognito_user_pools
  postReportsByUser(userID: ID!, sortDirection: ModelSortDirection, filter: ModelPostReportFilterInput, limit: Int, nextToken: String): ModelPostReportConnection @aws_cognito_user_pools
  reportsByPost(postID: ID!, sortDirection: ModelSortDirection, filter: ModelPostReportFilterInput, limit: Int, nextToken: String): ModelPostReportConnection @aws_cognito_user_pools
  getCommentReport(id: ID!): CommentReport @aws_cognito_user_pools
  listCommentReports(id: ID, filter: ModelCommentReportFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCommentReportConnection @aws_cognito_user_pools
  commentReportsByUser(userID: ID!, sortDirection: ModelSortDirection, filter: ModelCommentReportFilterInput, limit: Int, nextToken: String): ModelCommentReportConnection @aws_cognito_user_pools
  reportsByComment(commentID: ID!, sortDirection: ModelSortDirection, filter: ModelCommentReportFilterInput, limit: Int, nextToken: String): ModelCommentReportConnection @aws_cognito_user_pools
  getSightingReport(id: ID!): SightingReport @aws_cognito_user_pools
  listSightingReports(id: ID, filter: ModelSightingReportFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSightingReportConnection @aws_cognito_user_pools
  sightingReportsByUser(userID: ID!, sortDirection: ModelSortDirection, filter: ModelSightingReportFilterInput, limit: Int, nextToken: String): ModelSightingReportConnection @aws_cognito_user_pools
  reportsBySighting(sightingID: ID!, sortDirection: ModelSortDirection, filter: ModelSightingReportFilterInput, limit: Int, nextToken: String): ModelSightingReportConnection @aws_cognito_user_pools
}

input ModelUserConditionInput {
  username: ModelStringInput
  role: ModelRoleInput
  profilePicture: ModelStringInput
  email: ModelStringInput
  phone: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  username: String!
  role: Role!
  profilePicture: String
  email: String
  phone: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateUserInput {
  id: ID!
  username: String
  role: Role
  profilePicture: String
  email: String
  phone: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_cognito_user_pools
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post @aws_cognito_user_pools
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post @aws_cognito_user_pools
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post @aws_cognito_user_pools
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment @aws_cognito_user_pools
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment @aws_cognito_user_pools
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment @aws_cognito_user_pools
  createSighting(input: CreateSightingInput!, condition: ModelSightingConditionInput): Sighting @aws_cognito_user_pools
  updateSighting(input: UpdateSightingInput!, condition: ModelSightingConditionInput): Sighting @aws_cognito_user_pools
  deleteSighting(input: DeleteSightingInput!, condition: ModelSightingConditionInput): Sighting @aws_cognito_user_pools
  createPostReport(input: CreatePostReportInput!, condition: ModelPostReportConditionInput): PostReport @aws_cognito_user_pools
  updatePostReport(input: UpdatePostReportInput!, condition: ModelPostReportConditionInput): PostReport @aws_cognito_user_pools
  deletePostReport(input: DeletePostReportInput!, condition: ModelPostReportConditionInput): PostReport @aws_cognito_user_pools
  createCommentReport(input: CreateCommentReportInput!, condition: ModelCommentReportConditionInput): CommentReport @aws_cognito_user_pools
  updateCommentReport(input: UpdateCommentReportInput!, condition: ModelCommentReportConditionInput): CommentReport @aws_cognito_user_pools
  deleteCommentReport(input: DeleteCommentReportInput!, condition: ModelCommentReportConditionInput): CommentReport @aws_cognito_user_pools
  createSightingReport(input: CreateSightingReportInput!, condition: ModelSightingReportConditionInput): SightingReport @aws_cognito_user_pools
  updateSightingReport(input: UpdateSightingReportInput!, condition: ModelSightingReportConditionInput): SightingReport @aws_cognito_user_pools
  deleteSightingReport(input: DeleteSightingReportInput!, condition: ModelSightingReportConditionInput): SightingReport @aws_cognito_user_pools
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  role: ModelSubscriptionStringInput
  profilePicture: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  phone: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}

type Subscription {
  onCreateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["createUser"]) @aws_cognito_user_pools
  onUpdateUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["updateUser"]) @aws_cognito_user_pools
  onDeleteUser(filter: ModelSubscriptionUserFilterInput, owner: String): User @aws_subscribe(mutations: ["deleteUser"]) @aws_cognito_user_pools
  onCreatePost(filter: ModelSubscriptionPostFilterInput, owner: String): Post @aws_subscribe(mutations: ["createPost"]) @aws_cognito_user_pools
  onUpdatePost(filter: ModelSubscriptionPostFilterInput, owner: String): Post @aws_subscribe(mutations: ["updatePost"]) @aws_cognito_user_pools
  onDeletePost(filter: ModelSubscriptionPostFilterInput, owner: String): Post @aws_subscribe(mutations: ["deletePost"]) @aws_cognito_user_pools
  onCreateComment(filter: ModelSubscriptionCommentFilterInput, owner: String): Comment @aws_subscribe(mutations: ["createComment"]) @aws_cognito_user_pools
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput, owner: String): Comment @aws_subscribe(mutations: ["updateComment"]) @aws_cognito_user_pools
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput, owner: String): Comment @aws_subscribe(mutations: ["deleteComment"]) @aws_cognito_user_pools
  onCreateSighting(filter: ModelSubscriptionSightingFilterInput, owner: String): Sighting @aws_subscribe(mutations: ["createSighting"]) @aws_cognito_user_pools
  onUpdateSighting(filter: ModelSubscriptionSightingFilterInput, owner: String): Sighting @aws_subscribe(mutations: ["updateSighting"]) @aws_cognito_user_pools
  onDeleteSighting(filter: ModelSubscriptionSightingFilterInput, owner: String): Sighting @aws_subscribe(mutations: ["deleteSighting"]) @aws_cognito_user_pools
  onCreatePostReport(filter: ModelSubscriptionPostReportFilterInput, owner: String): PostReport @aws_subscribe(mutations: ["createPostReport"]) @aws_cognito_user_pools
  onUpdatePostReport(filter: ModelSubscriptionPostReportFilterInput, owner: String): PostReport @aws_subscribe(mutations: ["updatePostReport"]) @aws_cognito_user_pools
  onDeletePostReport(filter: ModelSubscriptionPostReportFilterInput, owner: String): PostReport @aws_subscribe(mutations: ["deletePostReport"]) @aws_cognito_user_pools
  onCreateCommentReport(filter: ModelSubscriptionCommentReportFilterInput, owner: String): CommentReport @aws_subscribe(mutations: ["createCommentReport"]) @aws_cognito_user_pools
  onUpdateCommentReport(filter: ModelSubscriptionCommentReportFilterInput, owner: String): CommentReport @aws_subscribe(mutations: ["updateCommentReport"]) @aws_cognito_user_pools
  onDeleteCommentReport(filter: ModelSubscriptionCommentReportFilterInput, owner: String): CommentReport @aws_subscribe(mutations: ["deleteCommentReport"]) @aws_cognito_user_pools
  onCreateSightingReport(filter: ModelSubscriptionSightingReportFilterInput, owner: String): SightingReport @aws_subscribe(mutations: ["createSightingReport"]) @aws_cognito_user_pools
  onUpdateSightingReport(filter: ModelSubscriptionSightingReportFilterInput, owner: String): SightingReport @aws_subscribe(mutations: ["updateSightingReport"]) @aws_cognito_user_pools
  onDeleteSightingReport(filter: ModelSubscriptionSightingReportFilterInput, owner: String): SightingReport @aws_subscribe(mutations: ["deleteSightingReport"]) @aws_cognito_user_pools
}

input LocationInput {
  latitude: Float!
  longitude: Float!
  address: String
}

type ModelPostConnection @aws_cognito_user_pools {
  items: [Post]!
  nextToken: String
}

input ModelPetStatusInput {
  eq: PetStatus
  ne: PetStatus
}

input ModelPetGenderInput {
  eq: PetGender
  ne: PetGender
}

input ModelPetSpeciesInput {
  eq: PetSpecies
  ne: PetSpecies
}

input ModelPostFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  status: ModelPetStatusInput
  gender: ModelPetGenderInput
  summary: ModelStringInput
  description: ModelStringInput
  resolved: ModelStringInput
  species: ModelPetSpeciesInput
  images: ModelStringInput
  userID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input ModelPostConditionInput {
  name: ModelStringInput
  status: ModelPetStatusInput
  gender: ModelPetGenderInput
  summary: ModelStringInput
  description: ModelStringInput
  resolved: ModelStringInput
  species: ModelPetSpeciesInput
  images: ModelStringInput
  userID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

input CreatePostInput {
  id: ID
  name: String!
  status: PetStatus!
  gender: PetGender!
  summary: String!
  description: String!
  resolved: String
  lastKnownLocation: LocationInput
  species: PetSpecies!
  images: [String]
  userID: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdatePostInput {
  id: ID!
  name: String
  status: PetStatus
  gender: PetGender
  summary: String
  description: String
  resolved: String
  lastKnownLocation: LocationInput
  species: PetSpecies
  images: [String]
  userID: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeletePostInput {
  id: ID!
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  gender: ModelSubscriptionStringInput
  summary: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  resolved: ModelSubscriptionStringInput
  species: ModelSubscriptionStringInput
  images: ModelSubscriptionStringInput
  userID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
}

type ModelCommentConnection @aws_cognito_user_pools @aws_api_key {
  items: [Comment]!
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  postID: ModelIDInput
  parentCommentID: ModelIDInput
  userID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input ModelCommentConditionInput {
  content: ModelStringInput
  postID: ModelIDInput
  parentCommentID: ModelIDInput
  userID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

input CreateCommentInput {
  id: ID
  content: String!
  postID: ID!
  parentCommentID: ID
  userID: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateCommentInput {
  id: ID!
  content: String
  postID: ID
  parentCommentID: ID
  userID: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteCommentInput {
  id: ID!
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  postID: ModelSubscriptionIDInput
  parentCommentID: ModelSubscriptionIDInput
  userID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
}

type ModelSightingConnection @aws_cognito_user_pools {
  items: [Sighting]!
  nextToken: String
}

input ModelReporterTypeInput {
  eq: ReporterType
  ne: ReporterType
}

input ModelSightingFilterInput {
  id: ModelIDInput
  image: ModelStringInput
  reporterType: ModelReporterTypeInput
  userID: ModelIDInput
  email: ModelStringInput
  phone: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelSightingFilterInput]
  or: [ModelSightingFilterInput]
  not: ModelSightingFilterInput
}

input ModelSightingConditionInput {
  image: ModelStringInput
  reporterType: ModelReporterTypeInput
  userID: ModelIDInput
  email: ModelStringInput
  phone: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelSightingConditionInput]
  or: [ModelSightingConditionInput]
  not: ModelSightingConditionInput
}

input CreateSightingInput {
  id: ID
  image: String
  location: LocationInput
  reporterType: ReporterType!
  userID: ID!
  email: String
  phone: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateSightingInput {
  id: ID!
  image: String
  location: LocationInput
  reporterType: ReporterType
  userID: ID
  email: String
  phone: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteSightingInput {
  id: ID!
}

input ModelSubscriptionSightingFilterInput {
  id: ModelSubscriptionIDInput
  image: ModelSubscriptionStringInput
  reporterType: ModelSubscriptionStringInput
  userID: ModelSubscriptionIDInput
  email: ModelSubscriptionStringInput
  phone: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionSightingFilterInput]
  or: [ModelSubscriptionSightingFilterInput]
}

type ModelPostReportConnection @aws_cognito_user_pools @aws_api_key {
  items: [PostReport]!
  nextToken: String
}

input ModelReportReasonInput {
  eq: ReportReason
  ne: ReportReason
}

input ModelPostReportFilterInput {
  id: ModelIDInput
  reason: ModelReportReasonInput
  description: ModelStringInput
  userID: ModelIDInput
  postID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostReportFilterInput]
  or: [ModelPostReportFilterInput]
  not: ModelPostReportFilterInput
}

input ModelPostReportConditionInput {
  reason: ModelReportReasonInput
  description: ModelStringInput
  userID: ModelIDInput
  postID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostReportConditionInput]
  or: [ModelPostReportConditionInput]
  not: ModelPostReportConditionInput
}

input CreatePostReportInput {
  id: ID
  reason: ReportReason!
  description: String
  userID: ID!
  postID: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdatePostReportInput {
  id: ID!
  reason: ReportReason
  description: String
  userID: ID
  postID: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeletePostReportInput {
  id: ID!
}

input ModelSubscriptionPostReportFilterInput {
  id: ModelSubscriptionIDInput
  reason: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  userID: ModelSubscriptionIDInput
  postID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostReportFilterInput]
  or: [ModelSubscriptionPostReportFilterInput]
}

type ModelCommentReportConnection @aws_cognito_user_pools @aws_api_key {
  items: [CommentReport]!
  nextToken: String
}

input ModelCommentReportFilterInput {
  id: ModelIDInput
  reason: ModelReportReasonInput
  description: ModelStringInput
  userID: ModelIDInput
  commentID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCommentReportFilterInput]
  or: [ModelCommentReportFilterInput]
  not: ModelCommentReportFilterInput
}

input ModelCommentReportConditionInput {
  reason: ModelReportReasonInput
  description: ModelStringInput
  userID: ModelIDInput
  commentID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCommentReportConditionInput]
  or: [ModelCommentReportConditionInput]
  not: ModelCommentReportConditionInput
}

input CreateCommentReportInput {
  id: ID
  reason: ReportReason!
  description: String
  userID: ID!
  commentID: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateCommentReportInput {
  id: ID!
  reason: ReportReason
  description: String
  userID: ID
  commentID: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteCommentReportInput {
  id: ID!
}

input ModelSubscriptionCommentReportFilterInput {
  id: ModelSubscriptionIDInput
  reason: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  userID: ModelSubscriptionIDInput
  commentID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentReportFilterInput]
  or: [ModelSubscriptionCommentReportFilterInput]
}

type ModelSightingReportConnection @aws_cognito_user_pools @aws_api_key {
  items: [SightingReport]!
  nextToken: String
}

input ModelSightingReportFilterInput {
  id: ModelIDInput
  reason: ModelReportReasonInput
  description: ModelStringInput
  userID: ModelIDInput
  sightingID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelSightingReportFilterInput]
  or: [ModelSightingReportFilterInput]
  not: ModelSightingReportFilterInput
}

input ModelSightingReportConditionInput {
  reason: ModelReportReasonInput
  description: ModelStringInput
  userID: ModelIDInput
  sightingID: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelSightingReportConditionInput]
  or: [ModelSightingReportConditionInput]
  not: ModelSightingReportConditionInput
}

input CreateSightingReportInput {
  id: ID
  reason: ReportReason!
  description: String
  userID: ID!
  sightingID: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateSightingReportInput {
  id: ID!
  reason: ReportReason
  description: String
  userID: ID
  sightingID: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DeleteSightingReportInput {
  id: ID!
}

input ModelSubscriptionSightingReportFilterInput {
  id: ModelSubscriptionIDInput
  reason: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  userID: ModelSubscriptionIDInput
  sightingID: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionSightingReportFilterInput]
  or: [ModelSubscriptionSightingReportFilterInput]
}
